diff -ruN DLL.sol DLL.sol
--- DLL.sol	1970-01-01 01:00:00.000000000 +0100
+++ DLL.sol	2022-11-11 09:49:35.581417181 +0100
@@ -0,0 +1,91 @@
+// SPDX-License-Identifier: GNU AGPLv3
+pragma solidity ^0.8.0;
+
+import "./DoubleLinkedList.sol";
+
+contract DLL {
+    using DoubleLinkedList for DoubleLinkedList.List;
+
+    // VERIFICATION INTERFACE
+
+    DoubleLinkedList.List public dll;
+
+    uint256 internal dummy_state_variable;
+
+    function dummy_state_modifying_function() public {
+        // to fix a CVL error when only one function is accessible
+        dummy_state_variable = 1;
+    }
+
+    function getValueOf(address _id) public view returns (uint256) {
+        return dll.getValueOf(_id);
+    }
+
+    function getHead() public view returns (address) {
+        return dll.getHead();
+    }
+
+    function getTail() public view returns (address) {
+        return dll.getTail();
+    }
+
+    function getNext(address _id) public view returns (address) {
+        return dll.getNext(_id);
+    }
+
+    function getPrev(address _id) public view returns (address) {
+        return dll.getPrev(_id);
+    }
+
+    function remove(address _id) public {
+        dll.remove(_id);
+    }
+
+    function insertSorted(address _id, uint256 _value) public {
+        dll.insertSorted(_id, _value);
+    }
+
+    // SPECIFICATION HELPERS
+
+    function getInsertedAfter() public view returns (address) {
+        return dll.insertedAfter;
+    }
+
+    function getInsertedBefore() public view returns (address) {
+        return dll.insertedBefore;
+    }
+
+    function getLength() internal view returns (uint256) {
+        uint256 len;
+        for (address current = getHead(); current != address(0); current = getNext(current)) len++;
+        return len;
+    }
+
+    function linkBetween(address _start, address _end) internal view returns (bool, address) {
+        if (_start == _end) return (true, address(0));
+        for (uint256 maxIter = getLength(); maxIter > 0; maxIter--) {
+            address next = getNext(_start);
+            if (next == _end) return (true, _start);
+            _start = next;
+        }
+        return (false, address(0));
+    }
+
+    function isForwardLinkedBetween(address _start, address _end) public view returns (bool ret) {
+        (ret, ) = linkBetween(_start, _end);
+    }
+
+    function prevFromHead(address _end) public view returns (address last) {
+        (, last) = linkBetween(getHead(), _end);
+    }
+
+    function isDecrSortedFrom(address _start) public view returns (bool) {
+        for (uint256 maxIter = getLength(); maxIter > 0; maxIter--) {
+            address next = getNext(_start);
+            if (next == address(0)) return true;
+            if (getValueOf(_start) < getValueOf(next)) return false;
+            _start = getNext(_start);
+        }
+        return true;
+    }
+}
diff -ruN DoubleLinkedList.sol DoubleLinkedList.sol
--- DoubleLinkedList.sol	2022-10-25 18:11:24.798784245 +0200
+++ DoubleLinkedList.sol	2022-11-11 10:02:13.350050350 +0100
@@ -18,6 +18,8 @@
         mapping(address => Account) accounts;
         address head;
         address tail;
+        address insertedBefore; // HARNESS: address of the account before which the account was inserted at last insertion.
+        address insertedAfter; // HARNESS: address of the account after which the account was inserted at last insertion.
     }
 
     /// ERRORS ///
@@ -93,33 +95,27 @@
     /// @param _list The list to search in.
     /// @param _id The address of the account.
     /// @param _value The value of the account.
-    /// @param _maxIterations The max number of iterations.
     function insertSorted(
         List storage _list,
         address _id,
-        uint256 _value,
-        uint256 _maxIterations
+        uint256 _value
     ) internal {
         if (_value == 0) revert ValueIsZero();
         if (_id == address(0)) revert AddressIsZero();
         if (_list.accounts[_id].value != 0) revert AccountAlreadyInserted();
 
-        uint256 numberOfIterations;
-        address next = _list.head; // If not added at the end of the list `_id` will be inserted before `next`.
+        _list.insertedAfter = address(0);
+        address next = _list.head; // `_id` will be inserted before `next`.
 
-        while (
-            numberOfIterations < _maxIterations &&
-            next != address(0) &&
-            _list.accounts[next].value >= _value
-        ) {
+        while (next != address(0) && _list.accounts[next].value >= _value) {
+            _list.insertedAfter = next;
             next = _list.accounts[next].next;
-            unchecked {
-                ++numberOfIterations;
-            }
         }
 
+        _list.insertedBefore = next;
+
         // Account is not the new tail.
-        if (numberOfIterations < _maxIterations && next != address(0)) {
+        if (next != address(0)) {
             // Account is the new head.
             if (next == _list.head) {
                 _list.accounts[_id] = Account({prev: address(0), next: next, value: _value});
diff -ruN test/TestRedBlackBinaryTreeOptimized.sol test/TestRedBlackBinaryTreeOptimized.sol
--- test/TestRedBlackBinaryTreeOptimized.sol	2022-10-25 18:11:24.798784245 +0200
+++ test/TestRedBlackBinaryTreeOptimized.sol	1970-01-01 01:00:00.000000000 +0100
@@ -1,42 +0,0 @@
-// SPDX-License-Identifier: UNLICENSED
-pragma solidity ^0.8.0;
-
-import "../RedBlackBinaryTreeOptimized.sol";
-
-contract TestRedBlackBinaryTreeOptimized {
-    using RedBlackBinaryTreeOptimized for RedBlackBinaryTreeOptimized.Tree;
-
-    RedBlackBinaryTreeOptimized.Tree public tree;
-
-    function insert(address _id, uint256 _value) external {
-        tree.insert(_id, _value);
-    }
-
-    function remove(address _id) external {
-        tree.remove(_id);
-    }
-
-    function keyExists(address _id) external view {
-        tree.keyExists(_id);
-    }
-
-    function last() external view {
-        tree.last();
-    }
-
-    function returnLast() external view returns (address) {
-        return tree.last();
-    }
-
-    function first() external view returns (address) {
-        return tree.first();
-    }
-
-    function next(address _key) external view returns (address) {
-        return tree.next(_key);
-    }
-
-    function returnKeyToValue(address _key) external view returns (uint256) {
-        return tree.keyToValue[_key];
-    }
-}
diff -ruN test/TestRedBlackBinaryTree.sol test/TestRedBlackBinaryTree.sol
--- test/TestRedBlackBinaryTree.sol	2022-10-25 18:11:24.798784245 +0200
+++ test/TestRedBlackBinaryTree.sol	1970-01-01 01:00:00.000000000 +0100
@@ -1,50 +0,0 @@
-// SPDX-License-Identifier: UNLICENSED
-pragma solidity ^0.8.0;
-
-import "../RedBlackBinaryTree.sol";
-
-contract TestRedBlackBinaryTree {
-    using RedBlackBinaryTree for RedBlackBinaryTree.Tree;
-
-    RedBlackBinaryTree.Tree public tree;
-
-    function insert(address _id, uint256 _value) external {
-        tree.insert(_id, _value);
-    }
-
-    function remove(address _id) external {
-        tree.remove(_id);
-    }
-
-    function keyExists(address _id) external view {
-        tree.keyExists(_id);
-    }
-
-    function last() external view {
-        tree.last();
-    }
-
-    function returnLast() external view returns (uint256) {
-        return tree.last();
-    }
-
-    function first() external view returns (uint256) {
-        return tree.first();
-    }
-
-    function next(uint256 _value) external view returns (uint256) {
-        return tree.next(_value);
-    }
-
-    function returnKeyToValue(address _key) external view returns (uint256) {
-        return tree.keyToValue[_key];
-    }
-
-    function valueKeyAtIndex(uint256 _value, uint256 _index) external view returns (address) {
-        return tree.valueKeyAtIndex(_value, _index);
-    }
-
-    function getNumberOfKeysAtValue(uint256 _value) external view returns (uint256) {
-        return tree.getNumberOfKeysAtValue(_value);
-    }
-}
